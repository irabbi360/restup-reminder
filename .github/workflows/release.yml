name: Build RestUp Reminder

on:
  push:
    tags:
      - 'v*.*.*'
  #   branches: [main]
  # pull_request:
  #   branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build Electron app
      run: npm run build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        USE_HARD_LINKS: false
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: electron-app-${{ matrix.os }}
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.dmg
          dist/*.exe
          dist/*.zip
          dist/*.tar.gz
          dist/*.snap
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
      
    - name: Create Release and Upload Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const path = require('path');
          const { globby } = require('globby');
          const { repo, owner } = context.repo;
          
          // Create release
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: `v${process.env.GITHUB_RUN_NUMBER}`,
            name: `Release v${process.env.GITHUB_RUN_NUMBER}`,
            body: `Automated release for commit ${context.sha}`,
            draft: false,
            prerelease: false
          });
          
          // Upload assets
          const files = await globby('artifacts/**/*');
          
          for (const file of files) {
            const stats = await fs.stat(file);
            if (stats.isFile()) {
              console.log(`Uploading ${file}`);
              const data = await fs.readFile(file);
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: release.data.id,
                name: path.basename(file),
                data: data
              });
            }
          }