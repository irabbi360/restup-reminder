name: Build RestUp Reminder

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build Electron app
      run: npm run build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        USE_HARD_LINKS: false
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: electron-app-${{ matrix.os }}
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.dmg
          dist/*.exe
          dist/*.zip
          dist/*.tar.gz
          dist/*.snap
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
      
    - name: RestUp Reminder Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: Automated release for commit ${{ github.sha }}
        draft: false
        prerelease: false
        
    - name: Upload RestUp Reminder Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const glob = require('@actions/glob');
          const { repo, owner } = context.repo;
          const release_id = '${{ steps.create_release.outputs.id }}';
          const globber = await glob.create('artifacts/**/*');
          const files = await globber.glob();
          
          for (const file of files) {
            const stats = await fs.stat(file);
            if (stats.isFile()) {
              console.log(`Uploading ${file}`);
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id,
                name: file.replace('artifacts/', ''),
                data: await fs.readFile(file)
              });
            }
          }